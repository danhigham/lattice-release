<%=
  def discover_external_ip
    networks = spec.networks.marshal_dump

    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end

    if !network
      _, network = networks.first
    end

    if !network
      raise "Could not determine IP via network spec: #{networks}"
    end

    network.ip
  end

  my_ip = discover_external_ip

  server = p("consul.agent.mode") == "server"
  lan_servers = p("consul.agent.servers.lan")

  config = {
    "datacenter" => p("consul.agent.datacenter"),
    "domain" => "cf.internal",
    "data_dir" => "/var/vcap/store/consul_agent",
    "log_level" => p("consul.agent.log_level"),
    "node_name" => "#{name.gsub('_', '-')}-#{spec.index}",
    "server" => server,
    "ports" => {
      "dns" => 53,
    },

    # explicitly listen and advertise this job's IP; otherwise consul will pick
    # an external IP, and possibly pick the wrong one (e.g. if containers are
    # running on the VM)
    "bind_addr" => my_ip,

    # without this, a single bootstrapped server will be orphaned after
    # restarting
    "disable_remote_exec" => true,
    "disable_update_check" => true,
    "protocol" => p("consul.agent.protocol_version"),
  }

if server
  config["bootstrap_expect"] = lan_servers.size
end

  config.to_json
%>
